import csv
import re
import os
import zipfile
import keras
import seaborn as sns
import pandas as pd

# import warnings filter
from warnings import simplefilter
# ignore all future warnings
simplefilter(action='ignore', category=FutureWarning)

from time import sleep
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.models import load_model
import numpy as np
from matplotlib.ticker import FuncFormatter
import matplotlib.pyplot as plt
from sklearn.utils.multiclass import unique_labels
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Conv1D, MaxPooling1D, AveragePooling1D, \
    GlobalAveragePooling1D, BatchNormalization
from sklearn import preprocessing, linear_model, metrics
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, confusion_matrix


def read_data(file_path):
    raw = []
    labels = []

    with open(file_path, mode='r') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            labels.append(1 if 'malicious' in row[0] else 0)
            raw.append(row[1:])

    return raw, labels

def read_data1(file_path):
    malwaredf = pd.read_csv(file_path, sep=',', header=None)
    print(malwaredf.columns)
    malwaredf[0] = (malwaredf[0] == 'pe-malicious').astype(int)
    lables = malwaredf[0]
    malwaredf = malwaredf.drop([0], axis=1)
    print(malwaredf.head(3))

    return lables, malwaredf 

def plot_confussion(y_true, y_pred, classes, title, cmap=plt.cm.Blues):
    cf_matrix = confusion_matrix(y_true, y_pred)

    group_names = ['True Neg','False Pos','False Neg','True Pos']
    group_counts = ["{0:0.0f}".format(value) for value in cf_matrix.flatten()]
    group_percentages = ["{0:.2%}".format(value) for value in
                     cf_matrix.flatten()/np.sum(cf_matrix)]
    labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]

    labels = np.asarray(labels).reshape(2,2)

    sns.heatmap(cf_matrix,annot=labels, fmt='', cmap='Blues')
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.title('Confusion Matrix')

def main():

    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

    train_Y, train_X = read_data1('/home/john/Licenta/dataset.csv')

    train_X, test_X, train_Y, test_Y = train_test_split(train_X, train_Y, test_size=0.3)

    train_X = train_X.to_numpy()
    test_X = test_X.to_numpy()
    train_Y = train_Y.to_numpy()
    test_Y = test_Y.to_numpy()
    
    model = baseline_model(train_Y, train_X)

    _, score2 = model.evaluate(train_X, train_Y)
    _, score3 = model.evaluate(test_X, test_Y)

    score2 = score2 * 100.0
    score3 = score3 * 100.0

    print('Test score ------> {}'.format(score3))
    print('Train score -----> {}'.format(score2))

    y_pred = get_predictions(model, test_X)

    plot_confussion(test_Y, y_pred, [0, 1], "Test Confussion matrix")
    plt.show()

def get_predictions(model, test_X):
    predicted_classes =  model.predict(test_X)
    return np.array([1 * (x[0]>=0.5) for x in predicted_classes]) 

def baseline_model(train_Y, train_X):
    model = Sequential()
    model.add(Dense(256, input_shape=(train_X.shape[1], ),activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.3))
    model.add(Dense(64, activation='relu'))
    model.add(Dropout(0.3))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=100)
    mc = ModelCheckpoint('best_model.h5', monitor='val_acc', mode='max', save_best_only=True)

    model.fit(train_X, train_Y, epochs=100, verbose=1, validation_split=0.3,
              callbacks=[es, mc])

    saved_model = load_model('best_model.h5')

    return saved_model

if __name__ == "__main__":
    main()