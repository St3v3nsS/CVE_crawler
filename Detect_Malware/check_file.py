import sys
sys.path.append('/home/john/Project/CVE_crawler/')
from Scrape_Exploit.download_archive import download
import uuid
from .encode_content import encode_pe
from keras.models import load_model
import numpy as np
from .ml_system import get_predictions
import magic
import urllib
import os

# malware_ext = [ 'EXE', 'DOC', 'DOCX', 'DOCM', 'HTA', 'HTML', 'HTM', 'JS', 'JAR', 'VBS',
#                 'VB', 'PDF', 'SFX', 'BAT', 'DLL', 'TMP', 'PY', 'MSI', 'MSP', 'COM', 'GADGET',
#                 'CMD', 'VBE', 'JSE', 'PS1', 'PS1XML', 'PS2', 'PS2XML', 'PSC1', 'PSC2', 'LNK', 'INF', 'SCF']

malware_mime_types = ['application/x-dosexec',
                      'application/x-msdownload',
                      'application/exe',
                      'application/x-exe',
                      'application/dos-exe',
                      'vms/exe',
                      'application/x-winexe',
                      'application/msdos-windows',
                      'application/x-msdos-program',
                      'application/zip',
                      'application/msword',
                      'application/x-msi']

def get_prediction_from_single_pe(url):
    try:
        mime_type = magic.from_buffer(urllib.request.urlopen(url).read(1024), mime=True)
        if mime_type not in malware_mime_types:
            return None
    except Exception:
        return None

    dst = '/tmp/file_' + str(uuid.uuid4())
    try:
        download(url, dst)
        np_arr = np.array([encode_pe(dst), ])
        model = load_model('/home/john/Project/CVE_crawler/Detect_Malware/best_model.h5')

        prediction = get_predictions(model, np_arr)
        if prediction[0] == 1:
            return 'Malware', url.split('/')[-1]
        return 'Legit'

    except ValueError as e:
        print(str(e))
        return None

if __name__ == "__main__":
    print(get_prediction_from_single_pe("http://172.31.0.2:8081/Files/office.exe"))