import re
import regex
from .scraper import Scraper


class SJSScraper(Scraper):
    def __init__(self, filename=None, name=None, exploit_type=None, title=None, platform=None, exploit=None, mongoclient=None, date=None):
        ext = ['.sjs']
        super().__init__(filename, name, exploit_type, title, platform, exploit, mongoclient, date, ext)

    def parse_infos(self):
        if self.is_parsed():
            return

        error = False
        parsed_file = True
        try:

            if self.check_source_at_begin():
                self.add_to("description", [self.source_at_begin[2]])
                self.add_to("targets", [self.source_at_begin[3]])
            comments = re.findall(r'#(.*)import', self.exploit, flags=re.S)
            if comments:
                comments = re.sub(r'^#\s*', '', comments[0], flags=re.M)
                comments = re.sub(r'\s+#', '', comments, flags=re.M)
                
                self.add_to("description", re.findall(r'Description##\s+([\S\s]*?)#', comments, flags=re.M))

            URI = self.parse_url()
            self.update_db(URI)

        except Exception as e:
            error, parsed_file = self.founded_error(e)

        finally:
            self.update_parsed_obj_db(parsed_file, error)

    def parse_url(self):
        URIs = []

        try:
            URIs.extend(regex.findall(r'(https?://.*\/.*?)[\)\"]', self.exploit, timeout=5))
        except TimeoutError: pass
        try:
            URIs.extend(self.get_basic_url())
        except TimeoutError:
            pass
        try:
            urls = self.get_method_url()
            for uri in urls:
                if not uri.startswith('/'):
                    URIs.append('/' + uri)
        except TimeoutError: pass

        return self.extract_url(URIs)
